#!/bin/sh

#
# you must set WORKDIR, $abi, $package_set, and $url_package_set before invoking this script.
# $package_set is one of latest/quartery/kmod. $url_package_set adjusts kmod to
# kmods_latest_2 which is what the server uses on disk.
#
# It'd be nice to have a function, and pass back three values... but here we are.
# Help welcome there.
#
# as . $SCRIPTDIR/fetch-parse-meta.conf
#

# get the name of this script
LOGGERTAG=${0##*/}


# we just try to create every time
WORKDIR="$BASEDIR_PACKAGER/$abi/$package_set"
$LOGGER -t $LOGGERTAG creating $WORKDIR
mkdir -p $WORKDIR

if [ ! -d $BASEDIR_PACKAGER ]
then
  $LOGGER -t $LOGGERTAG "FATAL error: $BASEDIR_PACKAGER does not exist - $0 terminating"
  exit 1
fi

if [ ! -d $WORKDIR ]
then
  mkdir -p $WORKDIR
  if [ $? -ne 0 ]
  then
    $LOGGER -t $LOGGERTAG "FATAL error: unable to create $WORKDIR - $0 terminating"
    exit 1
  fi  
fi

$LOGGER -t $LOGGERTAG cd $WORKDIR/
cd $WORKDIR/

# now we fetch meta.conf
#
METAFILE=$(mktemp $WORKDIR/meta.conf.XXXXXX)
$LOGGER -t $LOGGERTAG fetch --quiet --output=$METAFILE https://pkg.freebsd.org/$abi/$url_package_set/meta.conf

# NOTE: some older ABI do not have meta.conf
# Notably
# * FreeBSD:12:aarch64 latest, 
# * FreeBSD:12:armv6 latest
# * FreeBSD:12:armv7
#
# If not found, we assumes it is older, and use older default values.
#

# redirect stderr to /dev/null so it does not appear in the logs
fetch --quiet --output=$METAFILE https://pkg.freebsd.org/$abi/$url_package_set/meta.conf 2>/dev/null
if [ $? -ne 0 ]
then
  $LOGGER -t $LOGGERTAG "WARNING: unable to fetch https://pkg.freebsd.org/$abi/$url_package_set/meta.conf - using default values."
  ARCHIVE=packagesite
  ARCHIVE_FILE=packagesite.txz
  PACKAGE_FILE=packagesite.yaml
else
  $LOGGER -t $LOGGERTAG "parsing the fetched meta.conf file for pkg archive details."

  # This is the name of the archive we need to download
  ARCHIVE=$(grep 'manifests_archive = ' $METAFILE | cut -f 2 -d '=' | cut -f 2 -d '"')

  # This is the archive format, usually txz
  FORMAT=$(grep 'packing_format = ' $METAFILE | cut -f 2 -d '=' | cut -f 2 -d '"')

  # This is the name of the file we pull down from the server
  ARCHIVE_FILE="${ARCHIVE}.${FORMAT}"

  # the name of the file is obtained from $METAFILE - look for manifests
  # This is the archive format, usually txz
  PACKAGE_FILE=$(grep 'manifests = ' $METAFILE | cut -f 2 -d '=' | cut -f 2 -d '"')
fi

# disable for now

rm -f $METAFILE
